---

name: CI
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  determine_release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      will_release: ${{ steps.determine_release.outputs.new_release_published }}
    steps:
      - uses: actions/checkout@v3
      - id: determine_release
        uses: cycjimmy/semantic-release-action@v3.4.2
        with:
          dry_run: true
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ github.token }}
  release:
    runs-on: ubuntu-latest
    needs:
      - test
      - test-action
      - lint
      - determine_release
    if: ${{ needs.determine_release.outputs.will_release }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: cycjimmy/semantic-release-action@v3.4.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - uses: actions/setup-go@v3
        with:
          go-version: '1.18.x'
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.18.x-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-1.18.x
      - uses: goreleaser/goreleaser-action@v2.9.1
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ github.token }}
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: lint
        uses: reviewdog/action-golangci-lint@v2
        with:
          level: info
  test:
    strategy:
      matrix:
        go_version:
          - 1.18.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go_version }}
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go_version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go_version }}
      - name: test
        run: go test -v -race -coverprofile=cover.os-${{ matrix.os }}.ver-${{ matrix.go_version }}.txt -covermode=atomic ./...
      - name: upload coverage
        uses: codecov/codecov-action@v3
        if: ${{ matrix.go_version == '1.18.x' }}
        with:
          files: ./cover.os-${{ matrix.os }}.ver-${{ matrix.go_version }}.txt
  test-action:
    services:
      mysql:
        image: 'mysql:8.0'
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: app
        ports:
          - '3306/tcp'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./setup
      - name: wait
        run: waitmysql -dsn "root@tcp(127.0.0.1:${{ job.services.mysql.ports['3306'] }})/" -init-wait 100ms -max-delay 1m -max-attempts 20
